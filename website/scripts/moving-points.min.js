export class Moving_Points{constructor(t){this.canvas=t,this.points=[],this.interval=null,this.ctx=this.canvas.getContext("2d"),this.ctx.lineWidth=.25,window.addEventListener("resize",(()=>this.initialise())),this.initialise()}initialise(){this.canvas.height=+getComputedStyle(this.canvas).getPropertyValue("height").slice(0,-2)*window.devicePixelRatio,this.canvas.width=+getComputedStyle(this.canvas).getPropertyValue("width").slice(0,-2)*window.devicePixelRatio,this.interval&&clearInterval(this.interval),this.points=[];const t=this.canvas.width>this.canvas.height?30:15;for(let i=0;i<t;i++)this.points.push(new Point(this.canvas));this.MIN_CONNECT_DISTANCE=this.canvas.width>this.canvas.height?this.canvas.width/6:this.canvas.height/3,this.interval=setInterval((()=>this.refresh()),60),this.refresh()}refresh(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.draw_points()}draw_points(){for(let t=0;t<this.points.length;t++){let i=[];for(let s=0;s<this.points.length;s++){const h=this.dist_between_points(this.points[t],this.points[s]);h<this.MIN_CONNECT_DISTANCE&&i.push([this.points[s].x,this.points[s].y,(h/this.MIN_CONNECT_DISTANCE).toFixed(2)])}if(i.length>2){let s=this.points[t].x,h=this.points[t].y;for(let t=0;t<i.length;t++)this.ctx.beginPath(),this.ctx.moveTo(s,h),this.ctx.lineTo(i[t][0],i[t][1]),this.ctx.strokeStyle=`rgba(60, 60, 60, ${1-i[t][2]})`,this.ctx.stroke()}}for(let t=0;t<this.points.length;t++)this.points[t].update_position()}dist_between_points(t,i){return Math.round(Math.sqrt(Math.pow(t.x-i.x,2)+Math.pow(t.y-i.y,2)))}}class Point{constructor(t){this.canvas=t,this.x=this.getRandomNumber(0,this.canvas.width),this.y=this.getRandomNumber(0,this.canvas.height),this.speed=this.getRandomNumber(1,2);let i=this.getRandomNumber(0,360);this.direction={x:+Math.cos(i).toFixed(3),y:+Math.sin(i).toFixed(3)}}getRandomNumber(t,i){return Math.floor(Math.random()*(i-t+1)+t)}update_position(){this.x+=this.direction.x*this.speed,this.y+=this.direction.y*this.speed,this.x>this.canvas.width||this.x<0?this.direction.x=-1*this.direction.x:(this.y>this.canvas.height||this.y<0)&&(this.direction.y=-1*this.direction.y)}}